[ ] require bin fork
  [ ] inject styles
  [ ] make api closer to js-editor
    [ ] emit events, bro

- - - - - - - - - - - - - - - - - - -

[ ] fix the back and forth craziness
  [ ] hide literal details in block meta data
  [✓] better blockly-did-change handling
  [✓] add returning didUpdate event ignore flag
  [ ] have a "program" in the workspace, to allow for construction / strewing pieces about
    [ ] ignore changes to non-program dom
    [ ] build blocks into the program container

- - - - - - - - - - - - - - - - - - -

requireBin integration
======================

[ ] publish to npm, or update github
  [ ] update blockly core from node_modules
[ ] finish basic language features
  [ ] AssignmentExpression
    [✓] =
    [ ] +=, -=
  [✓] ReturnStatement
  [✓] IfStatement
    [✓] recusrively search for if-else statements
  [ ] BinaryExpression      ***
    [✓] basic math
    [ ] implement '%' and other binary ops
  [ ] BreakStatement
  [ ] CatchClause
  [ ] ConditionalExpression      ***
    # a ? b : c
  [ ] ContinueStatement
  [ ] DoWhileStatement      ***
  [ ] DebuggerStatement
  [ ] EmptyStatement
  [ ] ForStatement         ***
  [ ] ForInStatement
  [ ] FunctionDeclaration      ***
    [ ] named
    [✓] anon
  [ ] LabeledStatement
  [ ] LogicalExpression     ***
   [✓] && ||
  [ ] NewExpression      ***
  [ ] Property
  [ ] SequenceExpression
  [ ] SwitchStatement
  [ ] SwitchCase      ***
  [✓] ThisExpression      ***
  [ ] ThrowStatement
  [ ] UnaryExpression      ***
    [ ] ~
    [ ] - +
    [✓] !
  [ ] UpdateExpression      ***
    [ ] ++a --a
    [ ] a++ a--
    [ ] += -= *= /=
  [✓] VariableDeclarator
  [ ] WhileStatement
  [ ] WithStatement
[ ] Node blocks
  [ ] module.exports
  [ ] process

- - - - - - - - - - - - - - - - - - -

[ ] 
[ ] side by side blocks+js
[ ] write signatures for basic language features
  [ ] variable declaration
    [ ] var name validator
    [✓] var statements
  [✓] mutators - how do they work
  [✓] chain member statements
    [✓] a.b.c
    [✓] a.b().c
    [✓] a().b.c
  [✓] call statements
    [✓] a()
    [✓] mutate args
  [✓] anon func
  [✓] AssignmentExpression
    [✓] a =
    [✓] a.b =
[ ] sort patterns by complexity->simplicity, so that more complex patterns take precendence 
  [ ] make a complexity ranker
  [ ] on register, order correctly
[ ] try to keep js returning to its original form
[ ] show comments, either using the comment ding or more explicitly (as blocks?)
[✓] call args mutator
[✓] anon func change args, get renamed
[✓] node_event on("whatevs")
[ ] console.log("whatevs")
[✓] function name
[✓] extraeneous var appended to top

- - - - - - - - - - - - - - - - - - -

_TODO:
======
[ ] turn into node module(s)
  [✓] push to git
  [ ] split javascript editor and blockly core?
    [ ] core is a wrapper of the original repo + package.json + grunt build wrapper
      [ ] dep original repo
      [ ] make a grunt build system that sits on their build system, modifying source into modules as necesary
        [ ] parse files for var decs to append a module.exports object that includes everything
    [ ] editor
      [✓] mbalho js editor
      [✓] blockly editor
      [ ] widget injection
        [ ] css
        [ ] img assets
      [✓] master controller (exposes .getCode, .setCode, etc)
    [ ] demo app
      [ ] simple implementation, with get + set

[✓] roundtrip js
  [✓] how are blocks defined?
  [✓] how to start with a block in the field
  [✓] decent js code editor
    [✓] workspaceUpdate -> js_string -> editor
  [✓] AST -> blocks
  [✓] blocks for language features

[ ] sanity
  [ ] make readmes newbie proof
  [ ] explain origin, purpose, use-cases, deps, license

[ ] figure out widget injection
  [✓] html files pointing to js, how to resolve the pathname (see frame.html)
  [ ] blog about node + ui widgets + browserify
  [✓] style injection
  [ ] img assets???

 - - - - - - - - - - - - - - - - - -
 %%% IDEAS %%%

Useability
- for simple things, mutate via buttons instead of a mutation window

Side by Side: "code + blocks"
- mouse over block to see corresponding code (and visaversa)
- mouse over variable shows other usages of the same variable
- unified (block+code) history (undo/command-z)

Refactor:
- Blocks should generate AST, which then generates code


 - - - - - - - - - - - - - - - - - -

Notes:
======
unofficial git clone of blockly
https://github.com/tjpalmer/blockly

header script tags:
=================
storage
_soy/soyutils
template

body script tags:
================
[messages]
code

iframe script tags:
===================
blocky_compressed
javascript_compressed
python_compressed
en_compressed
[language loader]


Code.js
=======
write template to page
eval blocks
inf loop protection
add reserved words 
view stuff
clean workspace
switch tabs

Code Generation:
================
`Blockly.Generator.workspaceToCode('JavaScript')`

Xml Generation:
===============
var xmlDom = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);
var xmlText = Blockly.Xml.domToPrettyText(xmlDom);

Workspace Generation:
==========
try-catch:
xmlDom = Blockly.Xml.textToDom(xmlText);
Blockly.Xml.domToWorkspace(Blockly.mainWorkspace, xmlDom);
